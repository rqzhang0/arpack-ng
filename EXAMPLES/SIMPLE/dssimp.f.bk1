      program dssimp

         integer          maxn, maxnev, maxncv, ldv
         parameter       (maxn=256, maxnev=10, maxncv=25, ldv=maxn )
c   
c
c
         Double precision
     &                    v(ldv,maxncv), workl(maxncv*(maxncv+8)),
     &                    workd(3*maxn), d(maxncv,2), resid(maxn),
     &                        ax(maxn)
         logical          select(maxncv)
         integer          iparam(11), ipntr(11)
c
c
         character        bmat*1, which*2
         integer          ido, n, nev, ncv, lworkl, info, ierr,
     &                    j, nx, ishfts, maxitr, mode1, nconv
         logical          rvec
         Double precision
     &                    tol, sigma
c
c
         Double precision
     &                    zero
         parameter        (zero = 0.0D+0)
c
c
         Double precision
     &                    dnrm2
         external         dnrm2, daxpy
c
c
         intrinsic        abs
c
c
         include 'debug.h'
         ndigit = -3
         logfil = 6
         msgets = 0
         msaitr = 0
         msapps = 0
         msaupd = 1
         msaup2 = 0
         mseigt = 0
         mseupd = 0
c
c     %-------------------------------------------------%
c     | The following sets dimensions for this problem. |
c     %-------------------------------------------------%
c
         nx = 10
         n = nx*nx
c
c
         nev   = 4
         ncv   = 20
         bmat  = 'I'
         which = 'LM'
c
         if ( n .gt. maxn ) then
            print *, ' ERROR with _SSIMP: N is greater than MAXN '
            go to 9000
         else if ( nev .gt. maxnev ) then
            print *, ' ERROR with _SSIMP: NEV is greater than MAXNEV '
            go to 9000
         else if ( ncv .gt. maxncv ) then
            print *, ' ERROR with _SSIMP: NCV is greater than MAXNCV '
            go to 9000
         end if
c
c
         lworkl = ncv*(ncv+8)
         tol = zero
         info = 0
         ido = 0
c
c
         ishfts = 1
         maxitr = 300
         mode1 = 1
c
         iparam(1) = ishfts
c
         iparam(3) = maxitr
c
         iparam(7) = mode1
c
c
   10    continue
c
c
         call dsaupd ( ido, bmat, n, which, nev, tol, resid,
     &                 ncv, v, ldv, iparam, ipntr, workd, workl,
     &                 lworkl, info )
c
         if (ido .eq. -1 .or. ido .eq. 1) then
c
c
            call av (nx, workd(ipntr(1)), workd(ipntr(2)))
c
            go to 10
c
         end if
c
c
         if ( info .lt. 0 ) then
c
c
            print *, ' '
            print *, ' Error with _saupd, info = ', info
            print *, ' Check documentation in _saupd '
            print *, ' '
c
         else
c
c
            rvec = .true.
c
            call dseupd ( rvec, 'All', select, d, v, ldv, sigma,
     &           bmat, n, which, nev, tol, resid, ncv, v, ldv,
     &           iparam, ipntr, workd, workl, lworkl, ierr )
c
c
            if ( ierr .ne. 0) then
c
c
               print *, ' '
               print *, ' Error with _seupd, info = ', ierr
               print *, ' Check the documentation of _seupd. '
               print *, ' '
c
            else
c
               nconv =  iparam(5)
               do 20 j=1, nconv
c
c
                  call av(nx, v(1,j), ax)
                  call daxpy(n, -d(j,1), v(1,j), 1, ax, 1)
                  d(j,2) = dnrm2(n, ax, 1)
                  d(j,2) = d(j,2) / abs(d(j,1))
c
   20          continue
c
               call dmout(6, nconv, 2, d, maxncv, -6,
     &              'Ritz values and relative residuals')
            end if
c
c
            if ( info .eq. 1) then
               print *, ' '
               print *, ' Maximum number of iterations reached.'
               print *, ' '
            else if ( info .eq. 3) then
               print *, ' '
               print *, ' No shifts could be applied during implicit',
     &                  ' Arnoldi update, try increasing NCV.'
               print *, ' '
            end if
c
            print *, ' '
            print *, ' _SSIMP '
            print *, ' ====== '
            print *, ' '
            print *, ' Size of the matrix is ', n
            print *, ' The number of Ritz values requested is ', nev
            print *, ' The number of Arnoldi vectors generated',
     &               ' (NCV) is ', ncv
            print *, ' What portion of the spectrum: ', which
            print *, ' The number of converged Ritz values is ',
     &                 nconv
            print *, ' The number of Implicit Arnoldi update',
     &               ' iterations taken is ', iparam(3)
            print *, ' The number of OP*x is ', iparam(9)
            print *, ' The convergence criterion is ', tol
            print *, ' '
c
         end if
c
c
 9000    continue
c
      end
c
c
      subroutine av (nx, v, w)
         integer           nx, j, lo, n2
         Double precision
     &                     v(nx*nx), w(nx*nx), one, h2
         parameter         ( one = 1.0D+0 )
c
         call tv(nx,v(1),w(1))
         call daxpy(nx, -one, v(nx+1), 1, w(1), 1)
c
         do 10 j = 2, nx-1
            lo = (j-1)*nx
            call tv(nx, v(lo+1), w(lo+1))
            call daxpy(nx, -one, v(lo-nx+1), 1, w(lo+1), 1)
            call daxpy(nx, -one, v(lo+nx+1), 1, w(lo+1), 1)
   10    continue
c
         lo = (nx-1)*nx
         call tv(nx, v(lo+1), w(lo+1))
         call daxpy(nx, -one, v(lo-nx+1), 1, w(lo+1), 1)
c
         n2 = nx*nx
         h2 = one / dble((nx+1)*(nx+1))
         call dscal(n2, one/h2, w, 1)
         return
      end
c
c-------------------------------------------------------------------
      subroutine tv (nx, x, y)
c
         integer           nx, j
         Double precision
     &                     x(nx), y(nx), dd, dl, du
c
         Double precision
     &                     one, four
         parameter         (one = 1.0D+0, four = 4.0D+0)
c
c
         dd  = four
         dl  = -one
         du  = -one
c
         y(1) =  dd*x(1) + du*x(2)
         do 10 j = 2,nx-1
            y(j) = dl*x(j-1) + dd*x(j) + du*x(j+1)
   10    continue
         y(nx) =  dl*x(nx-1) + dd*x(nx)
         return
      end

